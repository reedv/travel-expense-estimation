from django.shortcuts import get_object_or_404, render
from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.template import loader
from django.urls import reverse
from django.views import generic
from django.utils import timezone
from django.db.models import Count

# Create your views here.
# A view function, or view for short, is simply a Python function that takes a Web request and returns a Web response.
# A view is a "type" of Web page in your Django application that generally serves a specific function and has a
# specific template.

from .models import Choice, Question


class IndexView(generic.ListView):  # generic.ListView abstracts concepts of display a list of objs.

    # ListView generic view uses a default template called <app name>/<model name>_list.html;
    # we use template_name to tell ListView to use our existing "polls/index.html" template.
    template_name = 'polls/index.html'

    # for ListView, the automatically generated context variable is question_list. To override this we provide
    # the context_object_name attribute, specifying that we want to use latest_question_list instead.
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """Return the last five published questions (that have associated choices)."""
        return Question.objects.annotate(choice_count=Count('choice')).filter(
            pub_date__lte=timezone.now(),  # see https://docs.djangoproject.com/en/dev/topics/db/queries/#field-lookups
            choice_count__gte=1
        ).order_by('-pub_date')[:5]


class DetailView(generic.DetailView):  # generic.DetailView abstracts concepts of display detail pg. for a type of obj.
    # set model for generic view to act on
    model = Question

    # By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html.
    # In our case, it would use the template "polls/question_detail.html". The template_name attribute is used to
    # tell Django to use a different specified template name instead of the autogenerated default template name.
    template_name = 'polls/detail.html'

    """
    In previous parts of the tutorial, the templates have been provided with a context that contains the question
    and latest_question_list context variables. For DetailView the question variable is provided automatically –
    since we’re using a Django model (Question), Django is able to determine an appropriate name for the context variable.
    """

    def get_queryset(self):
        """ Excludes any questions that aren't published yet """
        return Question.objects.filter(pub_date__lte=timezone.now())


class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'


def vote(request, question_id):
    """ processes submitted choice post-data """

    question = get_object_or_404(Question, pk=question_id)
    try:
        # access submitted data from POST form methods by key name from request.POST
        # FIXME: accessing shared data, but not automatically thread safe
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form if valid choice was submitted
        return render(request, template_name='polls/detail.html', context={
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.

        # reverse() helps avoid having to hardcode a URL in a view function. It is given the name of the view that
        # we want to pass control to and the variable portion of the URL pattern that points to that view
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))

